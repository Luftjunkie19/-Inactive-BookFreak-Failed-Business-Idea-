// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(cuid())
  nickname            String
  email               String                @unique
  photoURL            String?
  description         String?
  bookShelfs          Shelf[]
  dateOfJoin          DateTime
  addedBooks          Book[]
  recensions          Recension[]
  chats               Chat[]
  BookLover           BookLover[]
  Club                Club?                 @relation(fields: [clubId], references: [id])
  clubId              String?
  Post                Post[]
  Comment             Comment[]
  Test                Test[]
  Result              Result[]
  Member              Member[]
  notifications       Notification[]
  friendsStarted      Friend[]              @relation(name: "invitorRelation")
  friends             Friend[]              @relation(name: "inviteeRelation")
  blockedUsers        blockedUser[]         @relation(name: "blockedUser")
  blockerUser         blockedUser[]         @relation(name: "blockerUser")
  Lover               Lover[]
  Request             Request[]
  ReadingProgress     ReadingProgress[]
  Notification        Notification[]        @relation(name: "notificationSender")
  socialMediaLinks    SocialMediaLink[]
  backgroundImg       String?
  nationality         String?
  ReadingProgressNote ReadingProgressNote[]
  Message             Message[]
}

model blockedUser {
  id                   String    @id @default(cuid())
  blockedBy            String
  blockedId            String
  dateOfBlock          DateTime  @default(now())
  isTemporarilyBlocked Boolean
  endOfBlock           DateTime?
  wantSeeContent       Boolean
  blockMessaging       Boolean
  blockedUser          User      @relation(name: "blockedUser", fields: [blockedId], references: [id])
  blockerUser          User      @relation(name: "blockerUser", fields: [blockedBy], references: [id])
}

model Friend {
  id               String   @id @default(cuid())
  inviterUserId    String
  inviteeId        String
  Invitor          User     @relation(name: "invitorRelation", fields: [inviterUserId], references: [id])
  invitee          User     @relation(name: "inviteeRelation", fields: [inviteeId], references: [id])
  dateOfFriendship DateTime @default(now())
}

model Shelf {
  id     String @id @default(cuid())
  name   String
  books  Book[]
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model SocialMediaLink {
  id              String @id @default(cuid())
  socialMediaName String
  socialMediaType String
  url             String
  linkOwnerId     String
  linkOwner       User   @relation(fields: [linkOwnerId], references: [id])
}

model ReadingProgress {
  id                String   @unique @default(cuid())
  userId            String
  feelAfterReading  String
  typeOfBookVersion String
  user              User     @relation(fields: [userId], references: [id])
  bookId            String
  book              Book     @relation(fields: [bookId], references: [id])
  pagesRead         Int
  startTime         DateTime
  finishTime        DateTime

  ReadingProgressNote ReadingProgressNote[]
}

model ReadingProgressNote {
  id                String          @id @default(cuid())
  userId            String
  readingProgressId String
  note              String
  writtenDate       DateTime
  title             String
  user              User            @relation(fields: [userId], references: [id])
  readingProgress   ReadingProgress @relation(fields: [readingProgressId], references: [id])
}

model Book {
  id                  String            @id @default(cuid())
  bookCover           String
  title               String
  bookDescription     String
  addedBy             User              @relation(fields: [userId], references: [id])
  bookAddedAt         DateTime
  releaseDate         DateTime?
  fullTitle           String?
  recensions          Recension[]
  lovedBy             BookLover[]
  pages               Int
  accessibleTypes     String[]
  volume              String?
  volumeNumber        Int?
  serie               Int?
  publishingCycle     String?
  genre               String?
  isbn                Int?
  language            String?
  Shelf               Shelf[]
  shelfId             String?           @unique
  userId              String
  author              author?           @relation(fields: [authorId], references: [id])
  bookAuthor          String?
  authorId            String?           @unique
  publishingHouseId   String?           @unique
  bookPublishingHouse String?
  publishingHouse     publishingHouse?  @relation(fields: [publishingHouseId], references: [id])
  Prize               Prize[]
  Test                Test[]
  Message             Message[]
  ReadingProgress     ReadingProgress[]
}

model Recension {
  id            String   @id @default(cuid())
  bookId        String
  userId        String
  rating        Int
  comment       String
  recensionDate DateTime
  user          User     @relation(fields: [userId], references: [id])
  book          Book     @relation(fields: [bookId], references: [id])
}

model BookLover {
  id            String   @id @default(cuid())
  userId        String
  bookId        String
  bookLoverDate DateTime
  user          User     @relation(fields: [userId], references: [id])
  Book          Book     @relation(fields: [bookId], references: [id])
}

model author {
  id          String    @id @default(cuid())
  name        String
  birthDate   DateTime?
  deathDate   DateTime?
  nationality String?
  bio         String?
  books       Book[]
}

model publishingHouse {
  id    String @id @default(cuid())
  name  String
  books Book[]
}

model Chat {
  id             String        @id @default(cuid())
  users          User[]
  messages       Message[]
  dateOfCreation DateTime
  Club           Club[]
  Competition    Competition[]
}

model Message {
  id                  String       @id @default(cuid())
  content             String?
  senderId            String
  sender              User         @relation(fields: [senderId], references: [id])
  Chat                Chat?        @relation(fields: [chatId], references: [id])
  chatId              String?
  sentAt              DateTime
  isSeen              Boolean      @default(false)
  seenAt              DateTime?
  images              Json[]
  isSharing           Boolean      @default(false)
  sharingItem         String?
  sharedBookId        String?
  book                Book?        @relation(fields: [sharedBookId], references: [id])
  sharedCompetitionId String?
  competition         Competition? @relation(fields: [sharedCompetitionId], references: [id])
  sharedClubId        String?
  club                Club?        @relation(fields: [sharedClubId], references: [id])
  sharedTestId        String?
  test                Test?        @relation(fields: [sharedTestId], references: [id])
}

model Club {
  id              String        @id @default(cuid())
  chatId          String
  chat            Chat          @relation(fields: [chatId], references: [id])
  members         Member[]
  clubLogo        String
  clubName        String
  creationDate    DateTime      @default(now())
  hasRequirements Boolean
  description     String
  isFreeToJoin    Boolean
  requirements    Requirement[]
  User            User[]
  Message         Message[]
  requests        Request[]
}

model Requirement {
  id                                 String       @id @default(cuid())
  requirementType                    String
  requiredBookType                   String?
  requiredBookRead                   Int?
  requiredPagesRead                  Int?
  requirementQuestion                String?
  requirementQuestionPossibleAnswers String[]
  Club                               Club?        @relation(fields: [clubId], references: [id])
  clubId                             String?
  Competition                        Competition? @relation(fields: [competitionId], references: [id])
  competitionId                      String?
}

model Prize {
  id                 String       @id @default(cuid())
  prizeName          String?
  isPrizeItem        Boolean
  itemType           String
  prizeDescription   String?
  prizeImage         String?
  voucherFor         String?
  prizeMoneyAmount   Int?
  prizeMoneyCurrency String?
  chargeId           String?
  isCryptoPrize      Boolean
  bookReferenceId    String?
  book               Book?        @relation(fields: [bookReferenceId], references: [id])
  competition        Competition?
}

model Competition {
  id              String        @id @default(cuid())
  competitionName String
  competitionType String
  competitionLogo String
  startDate       DateTime
  endDate         DateTime?
  isTerminated    Boolean       @default(false)
  rules           Requirement[]
  chatId          String        @unique
  chat            Chat          @relation(fields: [chatId], references: [id])
  members         Member[]
  prizeId         String        @unique
  prize           Prize         @relation(fields: [prizeId], references: [id])
  creationDate    DateTime      @default(now())
  description     String?
  prizeHandedIn   Boolean       @default(false)
  chargeId        String?
  Message         Message[]
  requests        Request[]
}

model Request {
  id                      String         @id @default(cuid())
  userId                  String
  user                    User           @relation(fields: [userId], references: [id])
  competitionId           String?
  competition             Competition?   @relation(fields: [competitionId], references: [id])
  requestType             String
  clubId                  String?
  club                    Club?          @relation(fields: [clubId], references: [id])
  creationDate            DateTime       @default(now())
  fullfilsRequirements    Boolean
  readRequiredPagesAmount Int?
  readRequiredBooksAmount Int?
  requiredTextAnswer      String?
  isAccepted              Boolean        @default(false)
  Notification            Notification[]
}

model Member {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  Club              Club?        @relation(fields: [clubId], references: [id])
  clubId            String?
  Competition       Competition? @relation(fields: [competitionId], references: [id])
  competitionId     String?
  isBannedFromUsage Boolean      @default(false)
  banExpiryDate     DateTime?
  joiningDate       DateTime     @default(now())
  isCreator         Boolean      @default(false)
  isAdmin           Boolean      @default(false)
  isOwner           Boolean      @default(false)
  rule              String?
}

model Test {
  id              String     @id @default(cuid())
  name            String
  description     String
  createdAt       DateTime
  bookReferenceId String?
  Book            Book?      @relation(fields: [bookReferenceId], references: [id])
  creatorId       String
  creator         User?      @relation(fields: [creatorId], references: [id])
  questions       Question[]
  results         Result[]
  Message         Message[]
  testLovers      Lover[]
}

model Question {
  id              String   @id @default(cuid())
  questionContent String
  correctAnswer   String[]
  answers         Answer[]
  testId          String
  test            Test     @relation(fields: [testId], references: [id])
}

model Result {
  id               String   @id @default(cuid())
  testId           String
  test             Test     @relation(fields: [testId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  score            Int
  percentageResult Int
  timeDevoted      Int
  timeStarted      DateTime
  timeFinished     DateTime
}

model Answer {
  id            String   @id @default(cuid())
  answerContent String
  isCorrect     Boolean
  Question      Question @relation(fields: [questionId], references: [id])
  questionId    String
}

model Post {
  id           String    @id @default(cuid())
  header       String
  body         String
  ownerId      String
  creationTime DateTime  @default(now())
  owner        User      @relation(fields: [ownerId], references: [id])
  images       Json[]
  comments     Comment[]
  hashtags     Hashtag[]
  lovers       Lover[]
}

model Lover {
  id             String   @id @default(cuid())
  Post           Post?    @relation(fields: [postId], references: [id])
  commentLovedId String?
  comment        Comment? @relation(fields: [commentLovedId], references: [id])
  postId         String?
  loverId        String
  user           User     @relation(fields: [loverId], references: [id])
  timeAdded      DateTime @default(now())
  testId         String?
  Test           Test?    @relation(fields: [testId], references: [id])
}

model Comment {
  id       String    @id @default(cuid())
  postId   String
  Post     Post      @relation(fields: [postId], references: [id])
  ownerId  String
  owner    User      @relation(fields: [ownerId], references: [id])
  body     String
  images   String[]
  time     DateTime  @default(now())
  hashtags Hashtag[]
  Lover    Lover[]
}

model Hashtag {
  id          String    @id @default(cuid())
  hashtagName String
  posts       Post[]
  Comment     Comment[]
}

model Notification {
  id                      String    @id @default(cuid())
  type                    String
  memberAchievement       Json?
  isMemberAchievement     Boolean   @default(false)
  clubInvitation          Json?
  isClubInvitation        Boolean   @default(false)
  competitionInvitation   Json?
  isCompetitionInvitation Boolean   @default(false)
  isCompetitionRequest    Boolean   @default(false)
  isClubRequest           Boolean   @default(false)
  newMessage              Json?
  isRead                  Boolean   @default(false)
  receivedAt              DateTime
  seenAt                  DateTime?
  sentBy                  String
  requestId               String?
  request                 Request?  @relation(fields: [requestId], references: [id])
  sender                  User      @relation(fields: [sentBy], references: [id], name: "notificationSender")
  directedTo              String
  receiver                User      @relation(fields: [directedTo], references: [id])
}
