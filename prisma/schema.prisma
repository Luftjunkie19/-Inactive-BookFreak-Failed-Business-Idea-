// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  nickname      String
  email         String         @unique
  photoURL      String?
  description   String?
  booksInRead   BookInRead[]
  bookShelfs    Shelf[]
  dateOfJoin    DateTime
  addedBooks    Book[]
  recensions    Recension[]
  chats         Chat[]
  chatId        String?
  BookLover     BookLover[]
  Club          Club?          @relation(fields: [clubId], references: [id])
  clubId        String?
  Post          Post[]
  Comment       Comment[]
  Test          Test[]
  Result        Result[]
  Member        Member[]
  notifications Notification[]
}

model Shelf {
  id     String @id @default(cuid())
  name   String
  books  Book[]
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model BookInRead {
  id           String    @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  bookId       String
  readingDate  DateTime
  startedTime  DateTime
  finishedTime DateTime?
  pagesRead    Int
}

model Book {
  id                  String           @id @default(cuid())
  bookCover           String
  title               String
  bookDescription     String
  addedBy             User             @relation(fields: [userId], references: [id])
  bookAddedAt         DateTime
  releaseDate         DateTime?
  fullTitle           String?
  recensions          Recension[]
  lovedBy             BookLover[]
  pages               Int
  accessibleTypes     String[]
  volume              String?
  volumeNumber        Int?
  serie               Int?
  publishingCycle     String?
  genre               String?
  isbn                Int?
  language            String?
  Shelf               Shelf[]
  shelfId             String?          @unique
  userId              String
  author              author?          @relation(fields: [authorId], references: [id])
  bookAuthor          String?
  authorId            String?          @unique
  publishingHouseId   String?          @unique
  bookPublishingHouse String?
  publishingHouse     publishingHouse? @relation(fields: [publishingHouseId], references: [id])

  Test Test[]
}

model Recension {
  id            String   @id @default(cuid())
  bookId        String
  userId        String
  rating        Int
  comment       String
  recensionDate DateTime
  user          User     @relation(fields: [userId], references: [id])
  book          Book     @relation(fields: [bookId], references: [id])
}

model BookLover {
  id            String   @id @default(cuid())
  userId        String
  bookId        String
  bookLoverDate DateTime
  user          User     @relation(fields: [userId], references: [id])
  Book          Book     @relation(fields: [bookId], references: [id])
}

model author {
  id          String    @id @default(cuid())
  name        String
  birthDate   DateTime?
  deathDate   DateTime?
  nationality String?
  bio         String?
  books       Book[]
}

model publishingHouse {
  id    String @id @default(cuid())
  name  String
  books Book[]
}

model Chat {
  id             String        @id @default(cuid())
  users          User[]
  messages       Message[]
  dateOfCreation DateTime
  Club           Club[]
  Competition    Competition[]
}

model Message {
  id       String    @id @default(cuid())
  content  String
  senderId String
  Chat     Chat?     @relation(fields: [chatId], references: [id])
  chatId   String?
  sentAt   DateTime
  isSeen   Boolean   @default(false)
  seenAt   DateTime?
}

model Club {
  id              String        @id @default(cuid())
  chatId          String
  chat            Chat          @relation(fields: [chatId], references: [id])
  members         Member[]
  clubLogo        String
  clubName        String
  creationDate    DateTime      @default(now())
  hasRequirements Boolean
  description     String
  isFreeToJoin    Boolean
  requirements    Requirement[]
  User            User[]
}

model Requirement {
  id                                 String       @id @default(cuid())
  requirementType                    String
  requiredBookType                   String?
  requiredBookRead                   Int?
  requiredPagesRead                  Int?
  requirementQuestion                String?
  requirementQuestionPossibleAnswers String[]
  Club                               Club?        @relation(fields: [clubId], references: [id])
  clubId                             String?
  Competition                        Competition? @relation(fields: [competitionId], references: [id])
  competitionId                      String?
}

model Competition {
  id              String        @id @default(cuid())
  competitionName String
  competitionType String
  competitionLogo String
  startDate       DateTime
  endDate         DateTime
  rules           Requirement[]
  chatId          String?       @unique
  chat            Chat?         @relation(fields: [chatId], references: [id])
  members         Member[]
  prizeId         String?
  prize           Json
  creationDate    DateTime      @default(now())
  description     String?
  prizeHandedIn   Boolean       @default(false)
  chargeId        String?
}

model Member {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  Club          Club?        @relation(fields: [clubId], references: [id])
  clubId        String?
  Competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId String?
  joiningDate   DateTime     @default(now())
  isCreator     Boolean      @default(false)
  isAdmin       Boolean      @default(false)
  isOwner       Boolean      @default(false)
  rule          String?
}

model Test {
  id              String     @id @default(cuid())
  name            String
  description     String
  createdAt       DateTime
  bookReferenceId String?
  Book            Book?      @relation(fields: [bookReferenceId], references: [id])
  creatorId       String
  creator         User?      @relation(fields: [creatorId], references: [id])
  questions       Question[]
  results         Result[]
}

model Question {
  id              String   @id @default(cuid())
  questionContent String
  correctAnswer   String[]
  answers         Answer[]
  testId          String
  test            Test     @relation(fields: [testId], references: [id])
}

model Result {
  id               String   @id @default(cuid())
  testId           String   @unique
  test             Test     @relation(fields: [testId], references: [id])
  userId           String   @unique
  user             User?    @relation(fields: [userId], references: [id])
  score            Int
  percentageResult Int
  timeDevoted      DateTime
  timeStarted      DateTime
  timeFinished     DateTime
}

model Answer {
  id            String   @id @default(cuid())
  answerContent String
  isCorrect     Boolean
  Question      Question @relation(fields: [questionId], references: [id])
  questionId    String
}

model Post {
  id       String    @id @default(cuid())
  header   String
  body     String
  ownerId  String
  owner    User?     @relation(fields: [ownerId], references: [id])
  images   Json[]
  comments Comment[]
  hashtags Hashtag[]
}

model Comment {
  id       String    @id @default(cuid())
  postId   String
  Post     Post?     @relation(fields: [postId], references: [id])
  ownerId  String
  owner    User?     @relation(fields: [ownerId], references: [id])
  body     String
  images   String[]
  hashtags Hashtag[]
}

model Hashtag {
  id          String    @id @default(cuid())
  hashtagName String
  posts       Post[]
  Comment     Comment[]
}

model Notification {
  id                    String    @id @default(cuid())
  type                  String
  memberAchievement     Json?
  clubInvitation        Json?
  competitionInvitation Json?
  newMessage            Json?
  isRead                Boolean   @default(false)
  receivedAt            DateTime
  seenAt                DateTime?
  directedTo            String
  user                  User      @relation(fields: [directedTo], references: [id])
}

enum competitionType {
  ReadAndGrow
  RecommendReadGrowEnjoy
  ReadTestWin
}

enum answer {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
  N
  O
  P
  Q
  R
  S
  T
  U
  V
  W
  X
  Y
  Z
}

enum PrizeType {
  money
  book
  giftCard
  voucher
}

enum bookType {
  ebook
  paperbook
  audiobook
}
